/* ================================================================
 * JSQLParser : java based sql parser 
 * ================================================================
 *
 * Project Info:  http://jsqlparser.sourceforge.net
 * Project Lead:  Leonardo Francalanci (leoonardoo@yahoo.it);
 *
 * (C) Copyright 2004, by Leonardo Francalanci
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */
 
options{
    IGNORE_CASE=true ;
    STATIC=false;
//  DEBUG_LOOKAHEAD= true ;
//  FORCE_LA_CHECK=true;
//  DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(CCJSqlParser)
/* ================================================================
 * JSQLParser : java based sql parser 
 * ================================================================
 *
 * Project Info:  http://jsqlparser.sourceforge.net
 * Project Lead:  Leonardo Francalanci (leoonardoo@yahoo.it);
 *
 * (C) Copyright 2004, by Leonardo Francalanci
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */


package com.github.sql.analytic.parser;

import java.util.ArrayList;
import java.util.List;


import com.github.sql.analytic.expression.BinaryExpression;
import com.github.sql.analytic.expression.DoubleValue;
import com.github.sql.analytic.expression.SQLExpression;
import com.github.sql.analytic.expression.Function;
import com.github.sql.analytic.expression.AnalyticClause;
import com.github.sql.analytic.expression.QueryPartitionClause;
import com.github.sql.analytic.expression.OrderByClause;
import com.github.sql.analytic.expression.WindowClause;
import com.github.sql.analytic.expression.WindowRange;
import com.github.sql.analytic.expression.WindowOffset;
import com.github.sql.analytic.expression.InverseExpression;
import com.github.sql.analytic.expression.JdbcParameter;
import com.github.sql.analytic.expression.NamedParameter;
import com.github.sql.analytic.expression.LongValue;
import com.github.sql.analytic.expression.DateValue;
import com.github.sql.analytic.expression.TimeValue;
import com.github.sql.analytic.expression.TimestampValue;
import com.github.sql.analytic.expression.NullValue;
import com.github.sql.analytic.expression.Parenthesis;
import com.github.sql.analytic.expression.StringValue;
import com.github.sql.analytic.expression.CaseExpression;
import com.github.sql.analytic.expression.CastExpression;
import com.github.sql.analytic.expression.WhenClause;
import com.github.sql.analytic.expression.AnyComparisonExpression;
import com.github.sql.analytic.expression.AllComparisonExpression;
import com.github.sql.analytic.expression.operators.arithmetic.Addition;
import com.github.sql.analytic.expression.operators.arithmetic.Division;
import com.github.sql.analytic.expression.operators.arithmetic.Multiplication;
import com.github.sql.analytic.expression.operators.arithmetic.Subtraction;
import com.github.sql.analytic.expression.operators.conditional.AndExpression;
import com.github.sql.analytic.expression.operators.conditional.OrExpression;
import com.github.sql.analytic.expression.operators.string.Concat;
import com.github.sql.analytic.expression.operators.relational.Between;
import com.github.sql.analytic.expression.operators.relational.EqualsTo;
import com.github.sql.analytic.expression.operators.relational.ExpressionList;
import com.github.sql.analytic.expression.operators.relational.GreaterThan;
import com.github.sql.analytic.expression.operators.relational.GreaterThanEquals;
import com.github.sql.analytic.expression.operators.relational.InExpression;
import com.github.sql.analytic.expression.operators.relational.IsNullExpression;
import com.github.sql.analytic.expression.operators.relational.ItemsList;
import com.github.sql.analytic.expression.operators.relational.LikeExpression;
import com.github.sql.analytic.expression.operators.relational.ExistsExpression;
import com.github.sql.analytic.expression.operators.relational.MinorThan;
import com.github.sql.analytic.expression.operators.relational.MinorThanEquals;
import com.github.sql.analytic.expression.operators.relational.NotEqualsTo;
import com.github.sql.analytic.schema.Column;
import com.github.sql.analytic.schema.Table;
import com.github.sql.analytic.statement.SQLStatement;
import com.github.sql.analytic.statement.Cursor;
import com.github.sql.analytic.statement.create.table.ColDataType;
import com.github.sql.analytic.statement.create.table.ColumnDefinition;
import com.github.sql.analytic.statement.create.table.CreateTable;
import com.github.sql.analytic.statement.create.view.CreateView;
import com.github.sql.analytic.statement.create.table.Index;
import com.github.sql.analytic.statement.delete.Delete;
import com.github.sql.analytic.statement.drop.Drop;
import com.github.sql.analytic.statement.insert.Insert;
import com.github.sql.analytic.statement.replace.Replace;
import com.github.sql.analytic.statement.select.AllColumns;
import com.github.sql.analytic.statement.select.AllTableColumns;
import com.github.sql.analytic.statement.select.ColumnIndex;
import com.github.sql.analytic.statement.select.ColumnReference;
import com.github.sql.analytic.statement.select.Distinct;
import com.github.sql.analytic.statement.select.FromItem;
import com.github.sql.analytic.statement.select.Join;
import com.github.sql.analytic.statement.select.SubJoin;
import com.github.sql.analytic.statement.select.Limit;
import com.github.sql.analytic.statement.select.OrderByElement;
import com.github.sql.analytic.statement.select.PlainSelect;
import com.github.sql.analytic.statement.select.Select;
import com.github.sql.analytic.statement.select.SelectBody;
import com.github.sql.analytic.statement.select.SelectExpressionItem;
import com.github.sql.analytic.statement.select.SelectListItem;
import com.github.sql.analytic.statement.select.SubSelect;
import com.github.sql.analytic.statement.select.Top;
import com.github.sql.analytic.statement.select.Union;
import com.github.sql.analytic.statement.select.WithItem;
import com.github.sql.analytic.statement.truncate.Truncate;
import com.github.sql.analytic.statement.update.Update;
import com.github.sql.analytic.statement.policy.CreatePolicy;


/**
 * The parser generated by JavaCC
 */
public class CCJSqlParser {
 
} 


PARSER_END(CCJSqlParser)


SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}


TOKEN: /* SQL Keywords. prefixed with K_ to avoid name clashes */
{
<K_AS: "AS">
|   <K_BY:"BY">
|   <K_DO:"DO">
|   <K_IS:"IS">
|   <K_IN:"IN">
|   <K_OR:"OR">
|   <K_ON:"ON">
|   <K_ALL: "ALL">
|   <K_AND: "AND">
|   <K_ANY: "ANY">
|   <K_KEY: "KEY">
|   <K_NOT:"NOT">
|   <K_SET:"SET">
|   <K_ASC:"ASC">
|   <K_TOP:"TOP">
|   <K_END:"END">
|   <K_DESC:"DESC">
|   <K_INTO:"INTO">
|   <K_NULL:"NULL">
|   <K_LIKE:"LIKE">
|   <K_DROP:"DROP">
|   <K_JOIN:"JOIN">
|   <K_LEFT:"LEFT">
|   <K_FROM:"FROM">
|   <K_OPEN:"OPEN">
|   <K_CASE:"CASE">
|   <K_WHEN:"WHEN">
|   <K_THEN:"THEN">
|   <K_ELSE:"ELSE">
|   <K_SOME:"SOME">
|   <K_FULL:"FULL">
|   <K_WITH:"WITH">
|   <K_TABLE:"TABLE">
|	<K_VIEW:"VIEW">
|   <K_WHERE:"WHERE">
|   <K_USING:"USING">
|   <K_UNION:"UNION">
|   <K_GROUP:"GROUP">
|   <K_BEGIN:"BEGIN">
|   <K_INDEX: "INDEX">
|   <K_INNER:"INNER">
|   <K_LIMIT:"LIMIT">
|   <K_OUTER:"OUTER">
|   <K_ORDER:"ORDER">
|   <K_RIGHT:"RIGHT">
|   <K_DELETE:"DELETE">
|   <K_CREATE:"CREATE">
|   <K_SELECT:"SELECT">
|   <K_OFFSET:"OFFSET">
|   <K_EXISTS:"EXISTS">
|   <K_HAVING:"HAVING">
|   <K_INSERT:"INSERT">
|   <K_UPDATE:"UPDATE">
|   <K_VALUES:"VALUES">
|   <K_ESCAPE:"ESCAPE">
|   <K_PRIMARY:"PRIMARY">
|   <K_NATURAL:"NATURAL">
|   <K_REPLACE:"REPLACE">
|   <K_BETWEEN:"BETWEEN">
|   <K_TRUNCATE:"TRUNCATE">
|   <K_DISTINCT:"DISTINCT">
|   <K_INTERSECT:"INTERSECT">
|   <K_ROLLUP: "ROLLUP">
|   <K_CUBE: "CUBE">
|   <K_GROUPING:"GROUPING">
|   <K_SETS: "SETS">
|   <K_OVER: "OVER">
|   <K_PARTITION : "PARTITION">
|   <K_NULLS: "NULLS">
|   <K_FIRST: "FIRST">
|   <K_LAST: "LAST">
|   <K_ROWS: "ROWS">
|   <K_RANGE: "RANGE">
|   <K_UNBOUNDED: "UNBOUNDED"> 
|   <K_PRECEDING: "PRECEDING">
|   <K_FOLLOWING: "FOLLOWING">
|   <K_CURRENT: "CURRENT">
|   <K_ROW: "ROW">
|   <K_CAST: "CAST" > 
|   <K_FOR: "FOR" >
|   <K_CHECK: "CHECK">
|   <K_TO: "TO" >
|   <K_POLICY: "POLICY" >
|  < K_CURSOR: "CURSOR" >
|  < K_DECLARE: "DECLARE" >
|  < K_ENABLE: "ENABLE" >
|  < K_DISABLE: "DISABLE" >
}


TOKEN : /* Numeric Constants */
{
	< S_DOUBLE: ((<S_INTEGER>)? "." <S_INTEGER> ( ["e","E"] ([ "-","+"])? <S_INTEGER> )? 
				|
				(<S_INTEGER>)+ (".")? ["e","E"] ([ "-","+"])? (<S_INTEGER>)+
				)>
  | 	< S_INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >

}


SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" ~["+"] (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">

}


TOKEN:
{
	< S_IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
| 	< #LETTER: ["a"-"z", "A"-"Z"] >
|   < #SPECIAL_CHARS: "$" | "_">
|   < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" >
|   < S_HINTS: "/*+" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" >
|   < S_PARAM: ":" (  <DIGIT> | <LETTER> | <SPECIAL_CHARS> )* >
}


SQLStatement Statement() :
{ SQLStatement stm;}
{
	(
    stm = Select()
    |
    stm = Update()
    |
    stm = Insert()
    |
    stm = Delete()
    |
    LOOKAHEAD(3) stm = Replace()
    |
     [<K_CREATE> [<K_OR> <K_REPLACE>]] stm = Create()    
    |
    stm = Drop()
    |
    stm = Truncate()
    | LOOKAHEAD(2) <K_DECLARE>  stm = DeclareCursor()
    
    )
    [";"]
    <EOF>
    { return stm; }
}





SQLStatement Create():
{  SQLStatement statement = null; }
{       (
    	<K_TABLE>   statement = CreateTable()  
		| 
		<K_VIEW>    statement = CreateView()
		|
		<K_POLICY>  statement = CreatePolicy() 
		)

   {  return statement;  }
}


CreatePolicy CreatePolicy():
{
  CreatePolicy policy = new CreatePolicy();
  List<Column> columns = new ArrayList<Column>();
  Column column;
  List<String> roles = new ArrayList<String>();
  Token token;
  SQLExpression expression;
  Table table;
  List actions  = new ArrayList();}{
  token = <S_IDENTIFIER>  {
    policy.setName(token.image);  }
  <K_ON> table = Table() [ "(" column = Column() {columns.add(column);} ("," column = Column() {columns.add(column);})* ")" ] 
  [LOOKAHEAD(2) <K_FOR>
  (
    (      token =  <K_ALL> |token = < K_SELECT > | token = < K_UPDATE > | token = < K_DELETE > | token = < K_INSERT >
    )
          {
      actions.add(token.image);    }
    ( ","
    (      token =  <K_ALL> | token = < K_SELECT > | token = < K_UPDATE > | token = < K_DELETE > | token = < K_INSERT >
    ) 
    {
      actions.add(token.image);
    }    )*
  )  
  ]
  [
  	<K_TO> token = <S_IDENTIFIER >	{ roles.add(token.image); }
  	( token =<S_IDENTIFIER>	{ roles.add(token.image); })*  	
  ]
  [<K_USING> "(" expression = SQLExpression() ")" { policy.setUsing(expression); } ]
  [<K_WITH> <K_CHECK> "(" expression = SQLExpression() ")"{ policy.setCheck(expression); }]
  [ <K_ENABLE>  {
    policy.setEnabled(true);  } | <K_DISABLE >  {
    policy.setEnabled(false);  } ]
  {
    policy.setTable(table);
    if(columns.size() > 0){
      policy.setColumns(columns);    }
    if(roles.size() > 0)    {
      policy.setRoles(roles);    }
    if(actions.size() > 0)    {
      policy.setActions(actions);    }
    return policy;  }}

Update Update():
{ 
	Update update = new Update(); 
	Table table = null;
	SQLExpression where = null;
	Column tableColumn = null;
	List expList = new ArrayList(); 
	List columns = new ArrayList(); 
	SQLExpression value = null;
	
}
{
    <K_UPDATE> table=Table()
    <K_SET> tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); }
		  ("," tableColumn=Column() "=" value=SimpleExpression()  { columns.add(tableColumn); expList.add(value); } )*

   [ where=WhereClause() { update.setWhere(where); } ]
   { 
   		update.setColumns(columns);
   		update.setExpressions(expList);
   		update.setTable(table);
		return update;
   }
}

Replace Replace():
{ 
	Replace replace = new Replace(); 
	Table table = null;
	Column tableColumn = null;
	SQLExpression value = null;
	
	List columns = new ArrayList(); 
	List expList = new ArrayList(); 
	ItemsList itemsList = null;
	SQLExpression exp = null;
	
	
}
{
    <K_REPLACE> [<K_INTO>] table=Table()
    
    (
		(    
		    <K_SET> tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); }
			  ("," tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); } )*
			 {
		   		replace.setExpressions(expList);
			 }
		)
		|
	
		(
		     [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
			
			( 
				<K_VALUES>  "(" exp=PrimaryExpression() { expList.add(exp); } 
						("," exp=PrimaryExpression()  { expList.add(exp); } )* ")" { itemsList = new ExpressionList(expList); }
				
				| 
					{ replace.setUseValues(false); }
				
				    itemsList=SubSelect()  
			)
		    { 
				replace.setItemsList(itemsList);
		    }
		)
	)
   { 
   		if (columns.size() > 0)
	   		replace.setColumns(columns);
   		replace.setTable(table);
		return replace;
   }
}


Insert Insert():
{ 
	Insert insert = new Insert(); 
	Table table = null;
	Column tableColumn = null;
	List columns = new ArrayList(); 
	List primaryExpList = new ArrayList(); 
	ItemsList itemsList = null;
	SQLExpression exp = null;
}
{
    <K_INSERT> [<K_INTO>] table=Table()
    
    
     [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
	
	( 
		<K_VALUES>  "(" exp=SimpleExpression() { primaryExpList.add(exp); } 
				("," exp=SimpleExpression()  { primaryExpList.add(exp); } )* ")" { itemsList = new ExpressionList(primaryExpList); }
		
		| 
		
		[LOOKAHEAD(2) "(" ]
		(
			{ insert.setUseValues(false); }
			itemsList=  SubSelect() 
		)
		[ ")" ]
	)
    
    { 
		insert.setItemsList(itemsList);
	    insert.setTable(table);
	    if (columns.size() > 0)
	    	insert.setColumns(columns);
    	return insert; 
    }
}



Delete Delete():
{ 
	Delete delete = new Delete();
	Table table = null;
	SQLExpression where = null;
}
{
    <K_DELETE> [<K_FROM>] table=Table() 
    [where=WhereClause() { delete.setWhere(where); } ]
    { 
    	delete.setTable(table);
    	return delete;
    }
}



Column Column():
{
	String name1 = null;
	String name2 = null;
	String name3 = null;
}
{
    // [schema.][tabella.]colonna
    name1=RelObjectName() [ "." name2=RelObjectName() ["." name3=RelObjectName()]]
    {
    	String colName = null;
    	Table table = null;
    	if (name3 != null) {
    		table = new Table(name1, name2);
    		colName = name3;
    	} else if (name2 != null) {
    		table = new Table(null, name1);
    		colName = name2;
    	} else {
    		table = new Table(null, null);
    		colName = name1;
    	}
    	
    	return new Column(table, colName); 
   	}
}

String RelObjectName()  :
{	Token tk = null; }
{
	(
	tk=<S_IDENTIFIER>
	|
	tk=<S_QUOTED_IDENTIFIER>
	)
	
    { return tk.image; }
}

Table TableWithAlias():
{
	Table table = null;
	String alias = null;
}
{
	table=Table() [alias=Alias() { table.setAlias(alias); }]
	{ return table; }
}


Table Table():
{ 
	Table table = null;
	String name1 = null;
	String name2 = null;
	SQLExpression partition = null;
	
}
{
	(LOOKAHEAD(3) 
		name1=RelObjectName() "." name2=RelObjectName()  { table = new Table(name1, name2); }
		[ <K_PARTITION> [<K_FOR> { table.setPartitionFor(true); } ] 
			"(" partition = SimpleExpression()  ")" 
			{table.setPartition( partition ); }] 
		|
		name1=RelObjectName() { table = new Table(null, name1); } 
		[ <K_PARTITION> [<K_FOR> { table.setPartitionFor(true); } ] 
			"(" partition= SimpleExpression()  ")" 
			{table.setPartition( partition ); }] 
	)	
	{		
		return table; 
	}
	
}



Select Select():
{ 
	Select select = new Select();
	SelectBody selectBody = null;
	List with = null; 
}
{
	[ with=WithList() { select.setWithItemsList(with); } ]
    selectBody = SelectBody()
	{ 
		select.setSelectBody(selectBody);
		return select; 
	}
}

SelectBody SelectBody():
{ SelectBody selectBody = null; }
{
	(
		LOOKAHEAD(Union())
		    selectBody = Union() 
    	|
	    selectBody = PlainSelect()
	)
	{ return selectBody; }
}

String Hints():
{ Token token = null; }
{
	(token=<S_HINTS>)
   { return token.image; }
}

PlainSelect PlainSelect():
{ 
	PlainSelect plainSelect = new PlainSelect(); 
	List selectItems = null;
	FromItem fromItem = null;
	List joins = null;
	List distinctOn = null;
	SQLExpression where = null;
	List orderByElements;
	List groupByColumnReferences = null;
	SQLExpression having = null;
	Limit limit = null;
	Top top = null;
	String hints = null;
}
{
    <K_SELECT>
    [
    	<K_ALL> 
    	| 
    		(
    			<K_DISTINCT> { Distinct distinct = new Distinct(); plainSelect.setDistinct(distinct); } 
    				[ "ON" "(" distinctOn=SelectItemsList()  { plainSelect.getDistinct().setOnSelectItems(distinctOn); } ")" ]
    		)
    ] 
    
    [ 	top = Top() { plainSelect.setTop(top);	} ]
    [   hints = Hints() { plainSelect.setHints(hints); } ]
    
    selectItems=SelectItemsList()
    
    
     // TODO
    [IntoClause()]
    [<K_FROM>
    	fromItem=FromItem()
    	joins=JoinsList()
    	[ where=WhereClause() { plainSelect.setWhere(where); }]
    	[ groupByColumnReferences=GroupByColumnReferences() { plainSelect.setGroupByColumnReferences(groupByColumnReferences); }]
    	[ having=Having() { plainSelect.setHaving(having); }]
		[ 	orderByElements = OrderByElements()	{ 		 plainSelect.setOrderByElements(orderByElements);	}   ]
    	[ 	limit = Limit() { plainSelect.setLimit(limit);	} ]
    ]
	
	{ 
		plainSelect.setSelectItems(selectItems);
		plainSelect.setFromItem(fromItem);
		if (joins != null && joins.size() > 0)		{	  
			plainSelect.setJoins(joins);
	    }
		return plainSelect; 
	}
}



Union Union():
{ 
	Union union = new Union(); 
	List orderByElements = null;
	Limit limit = null;
	PlainSelect select = null;
	ArrayList selects = new ArrayList();
/*
this is not 100% right, since multiple UNION could have different ALL/DISTINCT clauses...
*/
}
{
	(
	
		(
			"(" select=PlainSelect() {selects.add(select);} ")"
				<K_UNION> [ <K_ALL> { union.setAll(true); } | <K_DISTINCT> 	{ union.setDistinct(true); } ]
			"(" select=PlainSelect() {selects.add(select);} ")"
			(	<K_UNION> [ <K_ALL> | <K_DISTINCT> ] "(" select=PlainSelect() {selects.add(select);} ")" )*
			[orderByElements=OrderByElements() {union.setOrderByElements(orderByElements);} ]
			[limit=Limit() {union.setLimit(limit);} ]
		)
		| 	
		(
			select=PlainSelect() {selects.add(select);} 
				<K_UNION> [ <K_ALL> { union.setAll(true); } | <K_DISTINCT> 	{ union.setDistinct(true); } ]
			select=PlainSelect() {selects.add(select);}
			(	<K_UNION> [ <K_ALL> | <K_DISTINCT> ] select=PlainSelect() {selects.add(select);} )*
			
		)
	)

	{ 
		union.setPlainSelects(selects);
		return union; 
	}
}

List WithList():
{
	ArrayList withItemsList = new ArrayList();
	WithItem with = null;
}
{
	<K_WITH> with=WithItem() { withItemsList.add(with); } ("," with=WithItem() { withItemsList.add(with); } )*
 
 	{ return withItemsList; }
}

WithItem WithItem():
{
	WithItem with = new WithItem();
	String name = null;
	List selectItems = null;
	SelectBody selectBody = null;
}
{
	 name=RelObjectName() { with.setName(name); }
	 [ "(" selectItems=SelectItemsList() ")" { with.setWithItemList(selectItems); } ]
	 <K_AS> 
	 "(" selectBody = SelectBody() { with.setSelectBody(selectBody); } ")"
	 { return with; }
}

List SelectItemsList():
{ 
	ArrayList selectItemsList = new ArrayList();
	SelectListItem selectItem = null; 
}
{ 
    selectItem=SelectListItem() { selectItemsList.add(selectItem); } ("," selectItem=SelectListItem() { selectItemsList.add(selectItem); } )*
    
    { return selectItemsList; }
}

SelectListItem SelectListItem():
{
	Function function = null;
	AllColumns allTableColumns = null;
	Column tableColumn = null;
	String alias = null;
	SelectListItem selectItem = null;
	SelectExpressionItem selectExpressionItem = null;
	SQLExpression expression = null;
	SubSelect subSelect = null;
}
{
	

    ("*" { selectItem = new AllColumns(); }
    |
	LOOKAHEAD(AllTableColumns()) selectItem=AllTableColumns()
	|
	 expression=SimpleExpression() { selectExpressionItem = new SelectExpressionItem(); selectExpressionItem.setExpression(expression); }
			 [alias=Alias() { selectExpressionItem.setAlias(alias); }] { selectItem = selectExpressionItem; }
	)
	{
		return selectItem;
	}
	
}

AllTableColumns AllTableColumns():
{
	Table table = null;
}
{  
     table=Table() "." "*"
	{ 
		return new AllTableColumns(table); 
	}
	
}

String Alias():
{ String retval = null; }
{
	[<K_AS>] retval=RelObjectName()
   { return retval; }
}

void IntoClause():
{}
{
   <K_INTO> Table() ("," Table())*
}

FromItem FromItem():
{
	FromItem fromItem = null;
	String alias = null;
}
{
	(
	     ( "TABLE" "(" fromItem = Function() ")" { ((Function)fromItem).setPipeline(true); } )
	    |
		(	
			"(" 	
				(
				LOOKAHEAD(SubJoin())
				fromItem=SubJoin()  
				|  
				fromItem=SubSelect()
				)
			")"
		)
		|
		fromItem=Table() 
	)
	
	[alias=Alias() { fromItem.setAlias(alias);  } ]
	{
		return fromItem;
	}
}

FromItem SubJoin():
{
	FromItem fromItem = null;
	Join join = null;
	SubJoin subJoin = new SubJoin();
}
{
	fromItem=FromItem() { subJoin.setLeft(fromItem); } 
	join=JoinerExpression() { subJoin.setJoin(join); }
	
	{
		return subJoin;
	}
}

List JoinsList():
{
	ArrayList joinsList = new ArrayList();
	Join join = null; 
}
{

    (join=JoinerExpression() { joinsList.add(join); })*
    
    { return joinsList; }
}

Join JoinerExpression():
{ 
	Join join = new Join(); 
	FromItem right = null;
	SQLExpression onExpression = null;
	Column tableColumn;
	List columns = null;
}
{

	  [ (
	  	<K_LEFT> { join.setLeft(true); }
  		| <K_RIGHT> { join.setRight(true); } 
  		| <K_FULL> { join.setFull(true); } 
  		| <K_NATURAL> { join.setNatural(true); } 
  		)
  	   ]
  		
  	   [
  	    (
  		<K_OUTER> { join.setOuter(true); }
  		| <K_INNER> { join.setInner(true); }
  		)
  	   ]
  	  
  	    ( <K_JOIN> | "," { join.setSimple(true); } ) right=FromItem()  
	[
		( <K_ON> onExpression=SQLExpression()  { join.setOnExpression(onExpression); } )
		|
		( <K_USING> "(" tableColumn=Column() { columns = new ArrayList(); columns.add(tableColumn); } 
				("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  
		  { join.setUsingColumns(columns); }   )
  	]			
  {
  	join.setRightItem(right); 
  } 
  
  
  { return join; }
}


SQLExpression WhereClause():
{
	SQLExpression retval = null;
}
{
    <K_WHERE> retval=SQLExpression()
    { return retval; }
}


List GroupByColumnReferences():
{
	SQLExpression columnReference = null;
	List columnReferences = new ArrayList();
}
{
    <K_GROUP> <K_BY> columnReference=SimpleExpression() {columnReferences.add(columnReference); }
    ("," columnReference=SimpleExpression()  {columnReferences.add(columnReference); } )*
	{
		return columnReferences;
	}
}

SQLExpression Having():
{
	SQLExpression having = null;
}
{
    <K_HAVING> having=SQLExpression()
	{
		return having;
	}
}

List OrderByElements():
{ 
	List orderByList = new ArrayList();
	OrderByElement orderByElement = null;
}
{
    <K_ORDER> <K_BY> orderByElement=OrderByElement() { orderByList.add(orderByElement); }
        ("," orderByElement=OrderByElement() { orderByList.add(orderByElement); } )*
    {
    	return orderByList; 	
    }
}

OrderByElement OrderByElement():
{
	OrderByElement orderByElement = new OrderByElement(); 
	List retval = new ArrayList();
	SQLExpression columnReference = null;
}
{
	columnReference = SimpleExpression()
    [<K_ASC> | (<K_DESC> { orderByElement.setAsc(false);}) ] 
    [<K_NULLS>
    	(
    	<K_FIRST> { orderByElement.setNullOrdering(OrderByElement.NullOrdering.NULLS_FIRST); }
    	|
    	<K_LAST>  { orderByElement.setNullOrdering(OrderByElement.NullOrdering.NULLS_LAST);  }
        )
    ]                  
	{
    	orderByElement.setColumnReference(columnReference);
		return orderByElement;
	}
}

Limit Limit():
{
	Limit limit = new Limit(); 
	Token token = null;
}
{
	(
			LOOKAHEAD(3)
				// mysql-> LIMIT offset,row_count
				<K_LIMIT> 
					 (
					 	token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } 
					 	|
					 	"?" { limit.setOffsetJdbcParameter(true);} 
					 ) 
					 ","  
				
				(
				token=<S_INTEGER> { limit.setRowCount(Long.parseLong(token.image)); } | "?" { limit.setRowCountJdbcParameter(true);}
				)
			| 
			// postgresql-> OFFSET offset
			 <K_OFFSET>
				 (token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } | "?" { limit.setOffsetJdbcParameter(true);} )  
			|
				// mysql-postgresql-> LIMIT (row_count | ALL) [OFFSET offset]
				<K_LIMIT> 
				 (
				 	token=<S_INTEGER> { limit.setRowCount(Long.parseLong(token.image)); } 
				 	|
				 	"?" { limit.setRowCountJdbcParameter(true);}  
				 	|
				 	<K_ALL> { limit.setLimitAll(true);}  
				 )
				 
				 [<K_OFFSET>
					 (token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } | "?" { limit.setOffsetJdbcParameter(true);} )  ]

		)
	{
		return limit;
	}
}

Top Top():
{
	Top top = new Top(); 
	Token token = null;
}
{
	<K_TOP>
	 (
	 	token=<S_INTEGER> { top.setRowCount(Long.parseLong(token.image)); } 
	 	|
	 	"?" { top.setRowCountJdbcParameter(true);} 
	 ) 
	{
		return top;
	}
}

ColumnReference ColumnReference():
{
	ColumnReference retval = null;
}
{
	(retval=Column() | retval=ColumnIndex())
	{
		return retval;
	}
}

ColumnIndex ColumnIndex(): 
{
	ColumnIndex retval = new ColumnIndex();
	Token index = null;
} 
{
	index=<S_INTEGER>
	{
		retval.setIndex(Integer.parseInt(index.image));
		return retval;
	}
}
	

SQLExpression SQLExpression():
{ 
	SQLExpression retval = null;
}
{
	(
	LOOKAHEAD(OrExpression())
		retval=OrExpression() 
		|
		"(" retval=SQLExpression() ")" {retval = new Parenthesis(retval); }
		
	)
	
    { return retval; }
}

SQLExpression OrExpression()  :
{
	SQLExpression left, right, result;
}
{
	left=AndExpression() { result = left; }
	(
		LOOKAHEAD(<K_OR>) 
			<K_OR>
			right=AndExpression()
			{
				result = new OrExpression(left, right);
				left = result;
	   		}
	 )*
	 {
	 	return result;
	 }
	   
}



SQLExpression AndExpression() :
{
	SQLExpression left, right, result;
	boolean not = false;
}
{

	(
	LOOKAHEAD(Condition())
	    left=Condition()
	    |
	    [ <K_NOT> { not = true; } ]
	    "(" left=OrExpression() ")" {left = new Parenthesis(left); if (not) { ((Parenthesis)left).setNot(); not = false; } }
	)
	{ result = left; }
	
	(
		LOOKAHEAD(<K_AND>)
 		<K_AND>
		(
		LOOKAHEAD(Condition())
		    right=Condition()
		    |
		    [ <K_NOT> { not = true; } ]
		    "(" right=OrExpression() ")" {right = new Parenthesis(right); if (not) { ((Parenthesis)right).setNot(); not = false; } }
		)
		{
			result = new AndExpression(left, right);
			left = result;
		}
	)*
	{
		return result;
	}
}

SQLExpression Condition():
{
	SQLExpression result;
}
{
	(LOOKAHEAD(SQLCondition()) result=SQLCondition()
	| result=RegularCondition())
	
	{ return result; }
}

SQLExpression RegularCondition():
{
	SQLExpression result = null;
	SQLExpression leftExpression;
	SQLExpression rightExpression;
	boolean not = false;
}
{

	[ <K_NOT> { not = true; } ] 
	leftExpression=ComparisonItem() { result = leftExpression; }

	(
	">" { result = new GreaterThan(); }
	| "<" { result = new MinorThan(); }
	| "=" { result = new EqualsTo(); }
	| ">=" { result = new GreaterThanEquals(); }
	| "<=" { result = new MinorThanEquals(); }
	| ("<>" | "!=") { result = new NotEqualsTo(); }
	
	)
	rightExpression=ComparisonItem()
	{
		BinaryExpression regCond = (BinaryExpression) result;
		regCond.setLeftExpression(leftExpression);
		regCond.setRightExpression(rightExpression);
		if (not)
			regCond.setNot();
	}		
	
	{ return result; }
}


SQLExpression SQLCondition():
{
	SQLExpression result;
}
{
	(
	LOOKAHEAD(InExpression()) result=InExpression()
	| LOOKAHEAD(Between()) result=Between()
	| LOOKAHEAD(IsNullExpression()) result=IsNullExpression()
	| LOOKAHEAD(ExistsExpression()) result=ExistsExpression()
	|  result=LikeExpression()
	)
	{ return result; }
}

SQLExpression InExpression() :
{
	InExpression result = new InExpression();
	ItemsList itemsList = null;
	SQLExpression leftExpression = null;
}
{
	leftExpression=SimpleExpression()
    [<K_NOT> { result.setNot(true); } ] <K_IN> "(" (LOOKAHEAD(SubSelect()) itemsList=SubSelect() | itemsList=SimpleExpressionList() ) ")"
	{ 
		result.setLeftExpression(leftExpression);
		result.setItemsList(itemsList);
		return result; 
	}
}

SQLExpression Between() :
{
	Between result = new Between();
	SQLExpression leftExpression = null;
	SQLExpression betweenExpressionStart = null;
	SQLExpression betweenExpressionEnd = null;
}
{
	leftExpression=SimpleExpression()
	    [<K_NOT> { result.setNot(true); }] 
	    <K_BETWEEN> betweenExpressionStart=SimpleExpression() <K_AND> betweenExpressionEnd=SimpleExpression()
	
	{ 
		result.setLeftExpression(leftExpression);
		result.setBetweenExpressionStart(betweenExpressionStart);
		result.setBetweenExpressionEnd(betweenExpressionEnd);
		return result; 
	}
}

SQLExpression LikeExpression() :
{
	LikeExpression result = new LikeExpression();
	SQLExpression leftExpression = null;
	SQLExpression rightExpression = null;
}
{
	leftExpression=SimpleExpression()
    [<K_NOT> { result.setNot(true); } ] <K_LIKE> rightExpression=SimpleExpression()
    [<K_ESCAPE> token=<S_CHAR_LITERAL> { result.setEscape((new StringValue(token.image)).getValue()); }]
	{ 
		result.setLeftExpression(leftExpression);
		result.setRightExpression(rightExpression);
		return result; 
	}
}

SQLExpression IsNullExpression():
{
	IsNullExpression result = new IsNullExpression();
	SQLExpression leftExpression = null;
}
{
	leftExpression=SimpleExpression()
    <K_IS> [<K_NOT> { result.setNot(true); } ] <K_NULL>

	{ 
		result.setLeftExpression(leftExpression);
		return result; 
	}
}


SQLExpression ExistsExpression():
{
	ExistsExpression result = new ExistsExpression();
	SQLExpression rightExpression = null;
}
{
    [<K_NOT> { result.setNot(true); } ] <K_EXISTS> rightExpression=SimpleExpression()
	{ 
		result.setRightExpression(rightExpression);
		return result; 
	}
}


ExpressionList SQLExpressionList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	SQLExpression expr = null;
}
{
    expr=SQLExpression() { expressions.add(expr); } ("," expr=SQLExpression() { expressions.add(expr); })*
	{
		retval.setExpressions(expressions);
		return retval;
	}
}

ExpressionList SimpleExpressionList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	SQLExpression expr = null;
}
{
    expr=SimpleExpression() { expressions.add(expr); } ("," expr=SimpleExpression() { expressions.add(expr); })*
	{
		retval.setExpressions(expressions);
		return retval;
	}
}

SQLExpression ComparisonItem() :
{ 
	SQLExpression retval = null; 
}
{
  (
    retval=AllComparisonExpression()
    | retval=AnyComparisonExpression()
    | retval=SimpleExpression()
  )

   {
      return retval;
   }
}

SQLExpression AllComparisonExpression() :
{ 
	AllComparisonExpression retval = null; 
	SubSelect subselect = null; 
}
{
 <K_ALL> "(" subselect=SubSelect() ")" { retval = new AllComparisonExpression(subselect); }
   {
      return retval;
   }
}

SQLExpression AnyComparisonExpression() :
{ 
	AnyComparisonExpression retval = null; 
	SubSelect subselect = null; 
}
{
 (<K_ANY> | <K_SOME>) "(" subselect=SubSelect() ")" { retval = new AnyComparisonExpression(subselect); }
   {
      return retval;
   }
}

SQLExpression SimpleExpression():
{ 
	SQLExpression retval = null; 
}
{
  (
		LOOKAHEAD(AdditiveExpression())
		retval=AdditiveExpression() 
		|
		"(" retval=AdditiveExpression() ")" {retval = new Parenthesis(retval); }
		| retval = Olap()
		
  
  )

   {
      return retval;
   }
}

SQLExpression Olap():
{ 
	Function retval = new Function(); 
	ExpressionList expressionList = null;
}
{
  (
      
		 <K_CUBE> {retval.setName("CUBE");} "(" expressionList= GroupingList() ")"
		| <K_ROLLUP> {retval.setName("ROLLUP");} "(" expressionList=GroupingList() ")"
		| <K_GROUPING>  <K_SETS>  {retval.setName("GROUPING SETS");} "(" expressionList=GroupingList() ")"
		
		
  )
  

   {
      retval.setParameters(expressionList);
      return retval;
   }
}


ExpressionList GroupingList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	SQLExpression expr = null;
}
{
   
    expr=GroupingExpression() { expressions.add(expr); } ("," expr=GroupingExpression() { expressions.add(expr); })*
	{
		retval.setExpressions(expressions);
		return retval;
	}
}

SQLExpression GroupingExpression():
{
  SQLExpression expr = null;
}
{
   
   LOOKAHEAD(3) ( "("  expr = GroupingList() ")" { return expr; }  ) 
      | 
    ( expr = SimpleExpression() {  return expr; }  )
   
   
}




SQLExpression AdditiveExpression():
{
	SQLExpression result = null;
	SQLExpression leftExpression = null;
	SQLExpression rightExpression = null;
}
{
    leftExpression=MultiplicativeExpression()  { result = leftExpression; }
    (
    	LOOKAHEAD(2) (  "+" { result = new Addition(); }
    				  | "-" { result = new Subtraction(); } 
    				  | "||"  { result = new Concat(); }
    				  ) 
    								
    						rightExpression=MultiplicativeExpression()
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}


SQLExpression MultiplicativeExpression():
{
	SQLExpression result = null;
	SQLExpression leftExpression = null;
	SQLExpression rightExpression = null;
}
{
	(
	LOOKAHEAD(PrimaryExpression())
	    leftExpression=PrimaryExpression()
	    |
	    "(" leftExpression=AdditiveExpression() ")" {leftExpression = new Parenthesis(leftExpression); }
	)
      { result = leftExpression; }
    (
    	LOOKAHEAD(2) ("*" { result = new Multiplication(); }
    								| "/" { result = new Division(); } ) 
    								
				(
				LOOKAHEAD(PrimaryExpression())
    						rightExpression=PrimaryExpression()
						    |
						    "(" rightExpression=AdditiveExpression() ")" {rightExpression = new Parenthesis(rightExpression); }
				)
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    { return result; }
}


SQLExpression PrimaryExpression():
{ 
	SQLExpression retval = null;
	Token token = null;
	boolean isInverse = false;
	String tmp = "";
}
{

(

	<K_NULL> { retval = new NullValue(); }

	|  LOOKAHEAD(CaseWhenExpression()) retval=CaseWhenExpression()
	|  LOOKAHEAD(CastExpression())   retval=CastExpression()
	
	| token = "?" { retval = new JdbcParameter(token); }
	
	| token = <S_PARAM> { retval = new NamedParameter(token);}
	
	| LOOKAHEAD([ "+" | "-"] Function()) [ "+" | "-" { isInverse = true; }] retval=Function() 
	
	| LOOKAHEAD([	"+" | "-"] <S_DOUBLE>) 	[	"+" | "-" { tmp = "-"; }]  token=<S_DOUBLE> { retval = new DoubleValue(tmp+token.image); }
	
	| LOOKAHEAD([	"+" | "-"] <S_INTEGER>)  	[	"+" | "-" { tmp = "-"; }]  token=<S_INTEGER> { retval = new LongValue(tmp+token.image); }

	| LOOKAHEAD(2) 	[ "+" | "-" { isInverse = true; }] retval=Column() 

	| LOOKAHEAD(2) [ "+" | "-" { isInverse = true; }]  "(" retval=PrimaryExpression() ")" {retval = new Parenthesis(retval); }

	| token=<S_CHAR_LITERAL> { retval = new StringValue(token.image); }

	| [ "+" | "-" { isInverse = true; }] "(" retval=SubSelect() ")"
	
	| 	"{d" token=<S_CHAR_LITERAL> "}" { retval = new DateValue(token.image); }

	| 	"{t" token=<S_CHAR_LITERAL> "}" { retval = new TimeValue(token.image); }

	| 	"{ts" token=<S_CHAR_LITERAL> "}" { retval = new TimestampValue(token.image); }
	
	
)

    { 
		if (isInverse) { 
			retval = new InverseExpression(retval); 
		}
    	return retval; 
    }
}


SQLExpression CastExpression():
{
	CastExpression castExp = new CastExpression();
	SQLExpression expr;
	Token type;
	
}
{
   <K_CAST> "("  expr = SimpleExpression() { castExp.setExpression(expr);  } "AS" type = <S_IDENTIFIER> { castExp.setType(type.image); }  ")"	   
    	
    {
    	return castExp;
    }
}


SQLExpression CaseWhenExpression():
{
	CaseExpression caseExp = new CaseExpression();
	SQLExpression switchExp = null;
	WhenClause clause;
	List whenClauses = new ArrayList();
	SQLExpression elseExp = null;
}
{
	<K_CASE> 
	(
    	    ( clause=WhenThenSearchCondition() { whenClauses.add(clause); } )+
             [<K_ELSE> elseExp=SimpleExpression()]
		|
		    switchExp=PrimaryExpression()
             ( clause=WhenThenValue() { whenClauses.add(clause); } )*
             [<K_ELSE> elseExp=SimpleExpression()]
	)             
    <K_END>
    { 
    	caseExp.setSwitchExpression(switchExp);
        caseExp.setWhenClauses(whenClauses);
		caseExp.setElseExpression(elseExp);
    	return caseExp;
    }
}

WhenClause WhenThenSearchCondition():
{
	WhenClause whenThen = new WhenClause();
	SQLExpression whenExp = null;
	SQLExpression thenExp = null;
}
{
	<K_WHEN> whenExp=SQLExpression() <K_THEN> thenExp=SimpleExpression()
	{
	   whenThen.setWhenExpression(whenExp);
	   whenThen.setThenExpression(thenExp);
	   return whenThen;
	}
}

WhenClause WhenThenValue():
{
	WhenClause whenThen = new WhenClause();
	SQLExpression whenExp = null;
	SQLExpression thenExp = null;
}
{
	<K_WHEN> whenExp=PrimaryExpression() <K_THEN> thenExp=PrimaryExpression()
	{
	   whenThen.setWhenExpression(whenExp);
	   whenThen.setThenExpression(thenExp);
	   return whenThen;
	}
}


Function Function():
{
	Function retval = new Function();
	String funcName = null;
	String tmp = null;
	ExpressionList expressionList = null;  
	AnalyticClause analyticClause = null;
}
{
	["{fn" { retval.setEscaped(true); } ]
	(
	    funcName=RelObjectName()
    	| 
    	// workaround for replace(string) function (name clash with mysql REPLACE expression)
	    <K_REPLACE> { funcName = "REPLACE"; }
	    | <K_GROUPING> { funcName = "GROUPING"; }
    ) [ "." tmp=RelObjectName() { funcName+= "." + tmp; } ["." tmp=RelObjectName() { funcName+= "." + tmp; }]]
    "(" [ [ <K_DISTINCT> {retval.setDistinct(true);} ]  ( expressionList=SimpleExpressionList() | "*" { retval.setAllColumns(true); }) ] ")"
    
    [ <K_OVER> "("  analyticClause = analyticClause() {  analyticClause.setFunction(retval); }  ")" ]
    
    ["}"]
    { 
        retval.setAnalyticClause(analyticClause);
	    retval.setParameters(expressionList);
	    retval.setName(funcName);
    	return retval; 
    }
}

AnalyticClause analyticClause():
{

 AnalyticClause analyticClause = new AnalyticClause();
 QueryPartitionClause queryPartitionClause;
 ExpressionList partitionExpressionList;
 OrderByClause oderByClause; 
 

}
{

[ <K_PARTITION> <K_BY> {
		queryPartitionClause = new QueryPartitionClause();
  		analyticClause.setQueryPartitionClause(queryPartitionClause); 
 	} 
	partitionExpressionList = SimpleExpressionList() {
		queryPartitionClause.setExpressionList(partitionExpressionList);
	} 
]

[ oderByClause =  orderByClause() { analyticClause.setOrderByClause(oderByClause);  } ]
  
 {
  
  return analyticClause;
 
 }

}

OrderByClause orderByClause():
{
  OrderByClause oderByClause = new OrderByClause(); 
  List<OrderByElement> elements;
  WindowClause windowCausue;
}
{
    elements =  OrderByElements() { oderByClause.setElements(elements);  } 
    [  windowCausue = windowCausue() { oderByClause.setWindowClause(windowCausue); } ]

 {
   return oderByClause;
 }

}


WindowClause windowCausue():
{
 WindowClause windowClause = new WindowClause();
 WindowRange range = new WindowRange();
 WindowOffset offset = null;
}
{

  (<K_ROWS> { windowClause.setType(WindowClause.Type.ROWS); }  |  <K_RANGE> { windowClause.setType(WindowClause.Type.RANGE); } )
  ( (
  
      <K_BETWEEN> { windowClause.setRange(range); } 
      offset = windowOffset() { range.setStart(offset); } 
      <K_AND> offset = windowOffset() { range.setEnd(offset); }
  
  )
    | offset = windowOffset() { windowClause.setOffset(offset); } 
  
  )
 
 {
   return windowClause;
 }
}

WindowOffset windowOffset():
{
  WindowOffset offset = new WindowOffset();
  SQLExpression expr = null;
}
{
  (
  
   <K_UNBOUNDED> (<K_PRECEDING> { offset.setType(WindowOffset.Type.PRECEDING); return offset; } |
   									 <K_FOLLOWING> { offset.setType(WindowOffset.Type.FOLLOWING); return offset; } ) 
  
  ) 
  |
  ( <K_CURRENT> <K_ROW> { offset.setType(WindowOffset.Type.CURRENT); return offset;} ) 
  |
   ( expr = SimpleExpression() {
   	offset.setType(WindowOffset.Type.EXPR); 
   	offset.setExpression(expr); 
   } 
    (<K_PRECEDING> { offset.setType(WindowOffset.Type.PRECEDING);  } | <K_FOLLOWING> { offset.setType(WindowOffset.Type.FOLLOWING);  } )
   )
  
{
  return offset;
}

} 

SubSelect SubSelect():
{
	SelectBody selectBody = null;
}
{
    selectBody=SelectBody()
    {
    	SubSelect subSelect = new SubSelect();
    	subSelect.setSelectBody(selectBody);
    	return subSelect;
    }
}

CreateView CreateView():
{

 	CreateView createView = new CreateView();
 	String schema = null;
 	String name = null; 	
 	List fields = null;
 	Select select = null;
 	String tmp = null;
 	

}
{
	 [ LOOKAHEAD(2) schema = RelObjectName() "." ] name = RelObjectName()
	 ["(" {fields = new ArrayList();} tmp = RelObjectName() { fields.add(tmp); } ("," tmp = RelObjectName() { fields.add(tmp); })* ")"] 
	 
	  <K_AS>	 select = Select()
	  
		{
		  createView.setName(name);
		  createView.setSchema(schema);
		  createView.setSelect(select);
		  createView.setFields(fields);
		  
		  return  createView;
		}

}


Cursor DeclareCursor():
{
  Cursor cursor = new Cursor();
  Token name = null;
  ColDataType colDataType = null;
  ColumnDefinition coldef = null;
  ArrayList columnDefinitions = new ArrayList();
  Select select = null;  
  ArrayList variableDefinitions = new ArrayList();
  cursor.setVariables(variableDefinitions);}
{


   [ name = <S_IDENTIFIER> colDataType = ColDataType()
   {
     ColumnDefinition varDef = new ColumnDefinition();
     varDef.setColumnName(name.image);
     varDef.setColDataType(colDataType);
     variableDefinitions.add(varDef);
   } (
     name = <S_IDENTIFIER> colDataType = ColDataType()
   {
     varDef = new ColumnDefinition();
     varDef.setColumnName(name.image);
     varDef.setColDataType(colDataType);
     variableDefinitions.add(varDef);
   }
     )*
   ]
   <K_CURSOR>
   name = <S_IDENTIFIER>  {
    cursor.setName(name.image);  }

  "("

        name = <S_IDENTIFIER>
		colDataType = ColDataType()
		{
		  coldef = new ColumnDefinition();
		  coldef.setColumnName(name.image);
		  coldef.setColDataType(colDataType);
		  columnDefinitions.add(coldef);		}

		( ","

        name = <S_IDENTIFIER>
		colDataType = ColDataType()
		{
		  coldef = new ColumnDefinition();
			coldef.setColumnName(name.image);
			coldef.setColDataType(colDataType);
			columnDefinitions.add(coldef);
		}
		 		)*

   ")" <K_AS> select = Select()   {
      cursor.setSelect(select);   }
{  cursor.setColumnDefinitions(columnDefinitions);
  return cursor;
}}

CreateTable CreateTable():
{
	CreateTable createTable = new CreateTable();
	Table table = null;
	ArrayList columnDefinitions = new ArrayList();
	List columnSpecs = null;
	List tableOptions = new ArrayList();
	Token columnName;
	Token tk = null;
	Token tk2 = null;
	Token tk3 = null;
	ColDataType colDataType = null;
	String stringList = null;
	ColumnDefinition coldef = null;
	List indexes = new ArrayList();
	List colNames = null;
	Index index = null;
	String parameter = null;
}
{
	
	// TODO:
//	[ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } ] 
	 table=Table() 
	[
		"("
		
		columnName=<S_IDENTIFIER>
		colDataType = ColDataType()
		{
			columnSpecs = new ArrayList();
		}
	
		( parameter=CreateParameter() { columnSpecs.add(parameter); } )*
	
		{ 
			coldef = new ColumnDefinition();
			coldef.setColumnName(columnName.image);
			coldef.setColDataType(colDataType);
			if (columnSpecs.size() > 0)
				coldef.setColumnSpecStrings(columnSpecs);
			columnDefinitions.add(coldef);
		}
		
		(
			","
			
			(
				(
					tk=<K_INDEX>
						tk3=<S_IDENTIFIER>		
						colNames=ColumnsNamesList()
						{ 
							index = new Index(); 
							index.setType(tk.image);
							index.setName(tk3.image);
							index.setColumnsNames(colNames);
							indexes.add(index);
						}
				)
				|
				(
					tk=<K_PRIMARY> tk2=<K_KEY> 
						colNames=ColumnsNamesList()
						{ 
							index = new Index(); 
							index.setType(tk.image + " "+ tk2.image);
							index.setColumnsNames(colNames);
							indexes.add(index);
						}
				)
				|
				(
					tk=<K_KEY>
						tk3=<S_IDENTIFIER>		
						colNames=ColumnsNamesList()
						{ 
							index = new Index(); 
							index.setType(tk.image);
							index.setName(tk3.image);
							index.setColumnsNames(colNames);
							indexes.add(index);
						}
				)
				|
				(
					columnName=<S_IDENTIFIER> 
					colDataType = ColDataType()
					{
						columnSpecs = new ArrayList();
					}
				
					( 	parameter=CreateParameter() { columnSpecs.add(parameter); } 	)*
		
					{ 
						coldef = new ColumnDefinition();
						coldef.setColumnName(columnName.image);
						coldef.setColDataType(colDataType);
						if (columnSpecs.size() > 0)
							coldef.setColumnSpecStrings(columnSpecs);
						columnDefinitions.add(coldef);
					}
				)
			)
		)* 
		
		")"
		( 	parameter=CreateParameter() { tableOptions.add(parameter); } )*
	
	]
	
	
	{
		createTable.setTable(table);
		if (indexes.size() > 0){
			createTable.setIndexes(indexes);
		}
		if (tableOptions.size() > 0){
			createTable.setTableOptionsStrings(tableOptions);
		}
		if (columnDefinitions.size() > 0){
			createTable.setColumnDefinitions(columnDefinitions);
		}
		
		return createTable;
	}
	
}

ColDataType ColDataType():
{
	ColDataType colDataType = new ColDataType();
	Token tk = null;
	ArrayList argumentsStringList = new ArrayList();
}
{
	( tk=<S_IDENTIFIER> { colDataType.setDataType(tk.image); } )
		
	
	[LOOKAHEAD(2) "(" ( (tk=<S_INTEGER> | tk=<S_CHAR_LITERAL>) { argumentsStringList.add(tk.image); } ["," {/*argumentsStringList.add(",");*/}] )*    ")"]
	{
		if (argumentsStringList.size() > 0)
			colDataType.setArgumentsStringList(argumentsStringList);
		return colDataType;
	}
}

String CreateParameter():
{
	String retval = null;
	Token tk = null;
}
{
		(
			tk=<S_IDENTIFIER> { retval = tk.image; } 
			|
			tk=<K_NULL> { retval = tk.image; } 
			|
			tk=<K_NOT> { retval = tk.image; } 
			|
			tk=<K_PRIMARY> { retval = tk.image; } 
			|
			tk=<K_KEY> { retval = tk.image; } 
			|
			tk=<S_CHAR_LITERAL> { retval = tk.image; } 
			|
			tk=<S_INTEGER> { retval = tk.image; } 
			|
			tk=<S_DOUBLE> { retval = tk.image; } 
			|
			"=" { retval = "="; } 
			| 
			retval=AList()
		)
	{return retval;}
}

String AList():
{
	StringBuffer retval = new StringBuffer("(");
	Token tk = null;
}
{
	 "(" 
	 
	 ( (tk=<S_INTEGER> | tk=<S_DOUBLE> | tk=<S_CHAR_LITERAL> | tk=<S_IDENTIFIER>) { retval.append(tk.image); } ["," {retval.append(",");}] )*    

	")"
	{
		retval.append(")");
		return retval.toString();
	}
}

List ColumnsNamesList():
{
	List retval = new ArrayList();
	Token tk = null;
}
{
	 "(" 
	 
	 	tk=<S_IDENTIFIER> { retval.add(tk.image); } 
	 	( "," tk=<S_IDENTIFIER> { retval.add(tk.image); } )*
	 
	")"
	{
		return retval;
	}
}


Drop Drop():
{
	Drop drop = new Drop();
	Token tk = null;
	List dropArgs = new ArrayList();
}
{
	<K_DROP>
	(
		tk=<S_IDENTIFIER>
		| 
		tk=<K_TABLE>
		|
		tk=<K_INDEX>
	)
    { drop.setType(tk.image); }
	tk=<S_IDENTIFIER> { drop.setName(tk.image); }
	(tk=<S_IDENTIFIER> { dropArgs.add(tk.image); })*
	
	{
		if (dropArgs.size() > 0)
			drop.setParameters(dropArgs);
		return drop;
	}
}

Truncate Truncate():
{
	Truncate truncate = new Truncate();
	Table table;
}
{
	<K_TRUNCATE> <K_TABLE>
	table=Table() { truncate.setTable(table); }
	
	{
		return truncate;
	}
}
